import { 
  pgTable, 
  uuid, 
  text, 
  timestamp, 
  integer, 
  decimal, 
  boolean, 
  jsonb
} from 'drizzle-orm/pg-core';
import { inputMethodEnum, dumpCategoryEnum, processingStatusEnum, suggestedActionEnum, urgencyEnum } from './enums';

// ============================================
// BRAIN DUMP SYSTEM
// ============================================

export const brainDumps = pgTable('brain_dumps', {
  id: uuid('id').primaryKey().defaultRandom(),
  rawText: text('raw_text').notNull(),
  inputMethod: inputMethodEnum('input_method').notNull().default('text'),
  dumpCategory: dumpCategoryEnum('dump_category'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  processed: boolean('processed').notNull().default(false),
  processingStatus: processingStatusEnum('processing_status').notNull().default('pending'),
  confidenceScore: decimal('confidence_score', { precision: 5, scale: 2 }),
  requiresHumanReview: boolean('requires_human_review').notNull().default(false)
});

export const aiProcessingResults = pgTable('ai_processing_results', {
  id: uuid('id').primaryKey().defaultRandom(),
  brainDumpId: uuid('brain_dump_id').notNull().references(() => brainDumps.id),
  aiInterpretation: text('ai_interpretation'),
  suggestedAction: suggestedActionEnum('suggested_action').notNull(),
  detectedUrgency: urgencyEnum('detected_urgency').notNull().default('unknown'),
  detectedEmotion: text('detected_emotion').array().default([]),
  suggestedSkillTrees: uuid('suggested_skill_trees').array().default([]),
  suggestedQuestType: text('suggested_quest_type'),
  extractedEntities: jsonb('extracted_entities').default({}),
  processedAt: timestamp('processed_at').notNull().defaultNow()
});

export const autoGeneratedContent = pgTable('auto_generated_content', {
  id: uuid('id').primaryKey().defaultRandom(),
  sourceDumpId: uuid('source_dump_id').notNull().references(() => brainDumps.id),
  contentType: text('content_type').notNull(), // 'quest', 'objective', 'note', 'reminder', 'reflection_prompt'
  contentId: uuid('content_id').notNull(),
  autoGenerated: boolean('auto_generated').notNull().default(true),
  humanModified: boolean('human_modified').notNull().default(false),
  accepted: boolean('accepted'),
  createdAt: timestamp('created_at').notNull().defaultNow()
});

export const parsingPatterns = pgTable('parsing_patterns', {
  id: uuid('id').primaryKey().defaultRandom(),
  triggerPhrase: text('trigger_phrase').notNull(),
  actionType: text('action_type').notNull(),
  priorityModifier: integer('priority_modifier').notNull().default(0),
  skillTreeHint: text('skill_tree_hint'),
  learnedFromUser: boolean('learned_from_user').notNull().default(false),
  usageCount: integer('usage_count').notNull().default(0),
  successRate: decimal('success_rate', { precision: 5, scale: 2 })
});

export const userPatterns = pgTable('user_patterns', {
  id: uuid('id').primaryKey().defaultRandom(),
  patternText: text('pattern_text').notNull(),
  patternMeaning: text('pattern_meaning'),
  frequency: integer('frequency').notNull().default(1),
  confirmedByUser: boolean('confirmed_by_user').notNull().default(false),
  lastSeen: timestamp('last_seen').notNull().defaultNow()
});

export const magicPhrases = pgTable('magic_phrases', {
  id: uuid('id').primaryKey().defaultRandom(),
  phrase: text('phrase').notNull().unique(),
  action: jsonb('action').notNull(),
  createsBuffs: boolean('creates_buffs').notNull().default(false),
  xpModifier: decimal('xp_modifier', { precision: 3, scale: 2 }).notNull().default('1.00'),
  personalMeaning: text('personal_meaning')
});

export const quickCaptureTemplates = pgTable('quick_capture_templates', {
  id: uuid('id').primaryKey().defaultRandom(),
  templateName: text('template_name').notNull(),
  triggerKeywords: text('trigger_keywords').array().default([]),
  templateStructure: jsonb('template_structure').notNull(),
  autoCreates: text('auto_creates').notNull(),
  usageCount: integer('usage_count').notNull().default(0)
});

export const processingQueue = pgTable('processing_queue', {
  id: uuid('id').primaryKey().defaultRandom(),
  brainDumpIds: uuid('brain_dump_ids').array().notNull(),
  processingType: text('processing_type').notNull(), // 'daily', 'voice_batch', 'email_import'
  scheduledFor: timestamp('scheduled_for'),
  completed: boolean('completed').notNull().default(false),
  totalCreatedQuests: integer('total_created_quests').notNull().default(0),
  totalCreatedNotes: integer('total_created_notes').notNull().default(0),
  summary: text('summary')
});